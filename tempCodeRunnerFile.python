def crc_division(message, generator):
    msg_bits = [int(b) for b in message]
    gen_bits = [int(b) for b in generator]
    pad = len(gen_bits) - 1
    padded = msg_bits + [0] * pad
    steps = []

    for i in range(len(padded) - len(gen_bits) + 1):
        if padded[i] == 1:
            before = "".join(str(b) for b in padded)
            segment_before = "".join(str(b) for b in padded[i:i+len(gen_bits)])
            for j in range(len(gen_bits)):
                padded[i+j] ^= gen_bits[j]
            segment_after = "".join(str(b) for b in padded[i:i+len(gen_bits)])
            after = "".join(str(b) for b in padded)
            steps.append((i, segment_before, segment_after, before, after))

    remainder = "".join(str(b) for b in padded[-pad:])
    transmitted = message + remainder
    return steps, remainder, transmitted


# Q1
message = "1010001101"
generator = "110101"  # x^5 + x^4 + x^2 + 1

steps, remainder, transmitted = crc_division(message, generator)

print("Q1:")
for s in steps:
    i, seg_before, seg_after, before, after = s
    print(f"Step at pos {i}: {seg_before} XOR {generator} -> {seg_after}")
print("Final CRC:", remainder)
print("Transmitted message:", transmitted)
